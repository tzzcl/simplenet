//文件名: client/stcp_client.c
//
//描述: 这个文件包含STCP客户端接口实现 
//
//创建日期: 2015年

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <assert.h>
#include <strings.h>
#include <unistd.h>
#include <sys/time.h>
#include <time.h>
#include <pthread.h>
#include "../topology/topology.h"
#include "stcp_client.h"
#include "../common/seg.h"

//声明tcbtable为全局变量
client_tcb_t* client_tcb_pools[MAX_TRANSPORT_CONNECTIONS];
//声明到SIP进程的TCP连接为全局变量
int sip_conn;
//int connection;
pthread_t client_seghandler;
int pkg_cnt=0,pkg_err=0;

#define MTC MAX_TRANSPORT_CONNECTIONS
/*********************************************************************/
//
//STCP API实现
//
/*********************************************************************/

// 这个函数初始化TCB表, 将所有条目标记为NULL.  
// 它还针对TCP套接字描述符conn初始化一个STCP层的全局变量, 该变量作为sip_sendseg和sip_recvseg的输入参数.
// 最后, 这个函数启动seghandler线程来处理进入的STCP段. 客户端只有一个seghandler.
void stcp_client_init(int conn) 
{
  memset(client_tcb_pools,0,sizeof(client_tcb_pools));
  sip_conn = conn;
  pthread_create(&client_seghandler,NULL,seghandler,NULL);
  fprintf(stderr,"stcp_client_init: success\n");
  return;
}

// 这个函数查找客户端TCB表以找到第一个NULL条目, 然后使用malloc()为该条目创建一个新的TCB条目.
// 该TCB中的所有字段都被初始化. 例如, TCB state被设置为CLOSED，客户端端口被设置为函数调用参数client_port. 
// TCB表中条目的索引号应作为客户端的新套接字ID被这个函数返回, 它用于标识客户端的连接. 
// 如果TCB表中没有条目可用, 这个函数返回-1.
int stcp_client_sock(unsigned int client_port) 
{
  int i;
  for (i=0;i<MTC;i++) {
    if (client_tcb_pools[i]==NULL)break;
  }
  if (i>=MTC) return -1;
  client_tcb_pools[i] = malloc(sizeof(client_tcb_t));
  memset(client_tcb_pools[i],0,sizeof(client_tcb_t));
  if ((client_tcb_pools[i]->client_nodeID = topology_getMyNodeID())==-1){
	fprintf(stderr,"%s: get node id failed\n",__FUNCTION__);return -1;}
  client_tcb_pools[i]->client_portNum = client_port;
  client_tcb_pools[i]->state = CLOSED;
  client_tcb_pools[i]->bufMutex = malloc(sizeof(pthread_mutex_t));
  pthread_mutex_init(client_tcb_pools[i]->bufMutex,NULL);
  client_tcb_pools[i]->recvMutex = malloc(sizeof(pthread_mutex_t));
  pthread_mutex_init(client_tcb_pools[i]->recvMutex,NULL);
  client_tcb_pools[i]->timer = NULL;
  fprintf(stderr,"%s: success\n",__FUNCTION__);
  return i;
}

// 这个函数用于连接服务器. 它以套接字ID, 服务器节点ID和服务器的端口号作为输入参数. 套接字ID用于找到TCB条目.  
// 这个函数设置TCB的服务器节点ID和服务器端口号,  然后使用sip_sendseg()发送一个SYN段给服务器.  
// 在发送了SYN段之后, 一个定时器被启动. 如果在SYNSEG_TIMEOUT时间之内没有收到SYNACK, SYN 段将被重传. 
// 如果收到了, 就返回1. 否则, 如果重传SYN的次数大于SYN_MAX_RETRY, 就将state转换到CLOSED, 并返回-1.
#define SYNSEG_TIMEOUT (SYN_TIMEOUT/1000)
int stcp_client_connect(int sockfd, int nodeID, unsigned int server_port) 
{
  client_tcb_t *p = client_tcb_pools[sockfd];
  int i;
  struct timeval time_b,time_e;
  seg_t *seg = malloc(sizeof(seg_t));
  stcp_hdr_t *hdr = &seg->header;
  memset(seg,0,sizeof(seg_t));
  p->server_nodeID = nodeID;
  p->server_portNum = server_port;
  hdr->src_port = p->client_portNum;
  hdr->dest_port = p->server_portNum;
  hdr->length = 0;
  hdr->type = SYN;
  seg->data[0]=0;
  p->state = SYNSENT;
  for (i=0;i<SYN_MAX_RETRY;i++) {
    gettimeofday(&time_b,NULL);
//    sip_sendseg(connection,seg);
    sip_sendseg(sip_conn,p->server_nodeID,seg);
    while (p->state==SYNSENT) {
      usleep(SYNSEG_TIMEOUT/1000);
      gettimeofday(&time_e,NULL);
      if (((long)(time_e.tv_sec-time_b.tv_sec)*1000000+time_e.tv_usec-time_b.tv_usec)>SYNSEG_TIMEOUT) break;
    }
    if (p->state==CONNECTED) {
      free(seg);
  fprintf(stderr,"stcp_client_connect: success\n");
      return 1;
    }
  }
  p->state=CLOSED;
  free(seg);
  return -1;
}

// 发送数据给STCP服务器. 这个函数使用套接字ID找到TCB表中的条目.
// 然后它使用提供的数据创建segBuf, 将它附加到发送缓冲区链表中.
// 如果发送缓冲区在插入数据之前为空, 一个名为sendbuf_timer的线程就会启动.
// 每隔SENDBUF_ROLLING_INTERVAL时间查询发送缓冲区以检查是否有超时事件发生. 
// 这个函数在成功时返回1，否则返回-1. 
// stcp_client_send是一个非阻塞函数调用.
// 因为用户数据被分片为固定大小的STCP段, 所以一次stcp_client_send调用可能会产生多个segBuf
// 被添加到发送缓冲区链表中. 如果调用成功, 数据就被放入TCB发送缓冲区链表中, 根据滑动窗口的情况,
// 数据可能被传输到网络中, 或在队列中等待传输.
int stcp_client_send(int sockfd, void* data, unsigned int length) 
{
  client_tcb_t* p = client_tcb_pools[sockfd];
  seg_t* seg;
  stcp_hdr_t* hdr;
  int i;
  int flag;
  if (p->state!=CONNECTED) return -1;
  pthread_mutex_lock(p->bufMutex);
  flag = (p->sendBufHead==NULL);
  for (i=0;i<length;i+=MAX_SEG_LEN) {
    seg = malloc(sizeof(seg_t));
    hdr = &seg->header;
    hdr->src_port = p->client_portNum;
    hdr->dest_port = p->server_portNum;
    hdr->type = DATA;
    if (length-i<MAX_SEG_LEN) {
      hdr->length = length-i;
      memcpy(seg->data,(char*)data+i,length-i);
      seg->data[length-i+1]=0;
    } else {
      hdr->length = MAX_SEG_LEN;
      memcpy(seg->data,(char*)data+i,MAX_SEG_LEN);
    }
    hdr->seq_num = p->next_seqNum;
    hdr->ack_num = 0;
    p->next_seqNum += hdr->length;
    /*hdr->checksum = 0;
    hdr->checksum = checksum(seg);*/
    if (flag) {
      p->sendBufHead = malloc(sizeof(segBuf_t));
      p->sendBufunSent = p->sendBufHead;
      p->sendBufTail = p->sendBufHead;
    } else {
      p->sendBufTail->next = malloc(sizeof(segBuf_t));
      p->sendBufTail = p->sendBufTail->next;
      if (p->sendBufunSent==NULL) p->sendBufunSent = p->sendBufTail;
    }
    memcpy(&p->sendBufTail->seg,seg,sizeof(seg_t));
    p->sendBufTail->next = NULL;
    free(seg);
  }
  pthread_mutex_unlock(p->bufMutex);
  if (flag) {
    /*if (pthread_kill(p->timer,0)==0) {
      fprintf(stderr,"stcp_client_send: 'sendbuf_timer' thread is still alive\n");
    }*/
    if (p->timer==NULL) p->timer = malloc(sizeof(pthread_t));
    pthread_create(p->timer,NULL,sendBuf_timer,(void*)p);
  }
  return 1;
}

// 这个函数用于断开到服务器的连接. 它以套接字ID作为输入参数. 套接字ID用于找到TCB表中的条目.  
// 这个函数发送FIN段给服务器. 在发送FIN之后, state将转换到FINWAIT, 并启动一个定时器.
// 如果在最终超时之前state转换到CLOSED, 则表明FINACK已被成功接收. 否则, 如果在经过FIN_MAX_RETRY次尝试之后,
// state仍然为FINWAIT, state将转换到CLOSED, 并返回-1.
#define FINSEG_TIMEOUT (FIN_TIMEOUT/1000)
int stcp_client_disconnect(int sockfd) 
{
  client_tcb_t *p = client_tcb_pools[sockfd];
  int i;
  struct timeval time_b,time_e;
  seg_t *seg = malloc(sizeof(seg_t));
  stcp_hdr_t *hdr = &seg->header;
  segBuf_t *segbuf = p->sendBufHead,*del;
  memset(seg,0,sizeof(seg_t));
  for (;segbuf!=NULL;) {
    del=segbuf;
    segbuf=segbuf->next;
    free(del);
  }
  p->sendBufunSent=p->sendBufTail=NULL;
  hdr->src_port = p->client_portNum;
  hdr->dest_port = p->server_portNum;
  hdr->length = 0;
  hdr->type = FIN;
  seg->data[0]=0;
  p->state = FINWAIT;
  for (i=0;i<SYN_MAX_RETRY;i++) {
    gettimeofday(&time_b,NULL);
    //sip_sendseg(connection,seg);
    sip_sendseg(sip_conn,p->server_nodeID,seg);
    while (p->state==FINWAIT) {
      usleep(SYNSEG_TIMEOUT/1000);
      gettimeofday(&time_e,NULL);
      if (((long)(time_e.tv_sec-time_b.tv_sec)*1000000+time_e.tv_usec-time_b.tv_usec)>SYNSEG_TIMEOUT) break;
    }
    if (p->state==CLOSED) {
      printf("stcp_client_disconnect: succeeded\n");
      free(seg);
      return 1;
    }
  }
  p->state=CLOSED;
  printf("stcp_client_disconnect: failed\n");
  free(seg);
  return -1;
}

// 这个函数调用free()释放TCB条目. 它将该条目标记为NULL, 成功时(即位于正确的状态)返回1,
// 失败时(即位于错误的状态)返回-1.
int stcp_client_close(int sockfd) 
{
  segBuf_t *p;
  if (client_tcb_pools[sockfd]==NULL) return -1;
  if (client_tcb_pools[sockfd]->state==CONNECTED) stcp_client_disconnect(sockfd);
  while (client_tcb_pools[sockfd]->sendBufHead!=NULL) {
    p = client_tcb_pools[sockfd]->sendBufHead;
    client_tcb_pools[sockfd]->sendBufHead=p->next;
    free(p);
  }
  if (client_tcb_pools[sockfd]->bufMutex!=NULL) {
    free(client_tcb_pools[sockfd]->bufMutex);
    client_tcb_pools[sockfd]->bufMutex=NULL;
  }
  if (client_tcb_pools[sockfd]->recvMutex!=NULL) {
    free(client_tcb_pools[sockfd]->recvMutex);
    client_tcb_pools[sockfd]->recvMutex=NULL;
  }
  if (client_tcb_pools[sockfd]->timer!=NULL) {
    free(client_tcb_pools[sockfd]->timer);
    client_tcb_pools[sockfd]->timer=NULL;
  }
  free(client_tcb_pools[sockfd]);
  client_tcb_pools[sockfd] = NULL;
  return 1;
}

//receive seg to buff
//return 1 if succeeded or 0 if failed

int recv_seg_to_buff(client_tcb_t* p, seg_t* seg) {/*
  if (p->recvBufTail-p->recvBuf+strlen(seg->data)>=RECEIVE_BUF_SIZE) return 0;
  pthread_mutex_lock(p->recvMutex);
  memcpy(p->recvBufTail,seg->data,strlen(seg->data));
  p->recvBufTail+=strlen(seg->data);
  pthread_mutex_unlock(p->recvMutex);*/
  return 1;
}

//used to send DATAACK
void send_dataack(int sockfd) {
  client_tcb_t* p = client_tcb_pools[sockfd];
  seg_t* seg_dataack = malloc(sizeof(seg_t));
  stcp_hdr_t* hdr = &seg_dataack->header;
  hdr->src_port = p->client_portNum;
  hdr->dest_port = p->server_portNum;
  hdr->length = 0;
  hdr->type = DATAACK;
  seg_dataack->data[0]=0;
  //sip_sendseg(connection,seg_dataack);
  sip_sendseg(sip_conn,p->server_nodeID,seg_dataack);
  free(seg_dataack);
}

// 这是由stcp_client_init()启动的线程. 它处理所有来自服务器的进入段. 
// seghandler被设计为一个调用sip_recvseg()的无穷循环. 如果sip_recvseg()失败, 则说明到SIP进程的连接已关闭,
// 线程将终止. 根据STCP段到达时连接所处的状态, 可以采取不同的动作. 请查看客户端FSM以了解更多细节.
void* seghandler(void* arg) 
{
  int r,i;
  seg_t recv_seg;
  stcp_hdr_t *hdr;
  while (1) {
    //r = sip_recvseg(connection,&recv_seg);
    int src;
    r = sip_recvseg(sip_conn,&src,&recv_seg);
    pkg_cnt++;
    if (r==-1) {
      puts("sip_recvseg failed");
      pthread_exit(NULL);
    }
    if (r==1) {pkg_err++;continue;}
    hdr = &recv_seg.header;
    for (i=0;i<MTC;i++) {
      if (client_tcb_pools[i]==NULL) continue;
      if (client_tcb_pools[i]->client_portNum==hdr->dest_port) {
        switch (hdr->type) {
          default:
            fprintf(stderr,"sip_recvseg: unexpected stcp_hdr_t type %d\n",hdr->type);
            pthread_exit(NULL);
          case SYNACK:
            if (client_tcb_pools[i]->state==SYNSENT) client_tcb_pools[i]->state = CONNECTED;
            fprintf(stderr,"sip_recvseg: synack\n");
            break;
          case FINACK:
            if (client_tcb_pools[i]->state==FINWAIT) client_tcb_pools[i]->state = CLOSED;
            fprintf(stderr,"sip_recvseg: finack\n");
            break;
          case DATA:
            if (client_tcb_pools[i]->state==CONNECTED) 
              if (recv_seg_to_buff(client_tcb_pools[i],&recv_seg))
                send_dataack(i);
            break;
          case DATAACK:
            if (client_tcb_pools[i]->state==CONNECTED) {
              fprintf(stderr,"dataack: %d\n",recv_seg.header.ack_num);
              segBuf_t* p=client_tcb_pools[i]->sendBufHead;
              pthread_mutex_lock(client_tcb_pools[i]->bufMutex);
              //fprintf(stderr,"lock");
              while(p!=client_tcb_pools[i]->sendBufunSent) {
                if (p->seg.header.seq_num==recv_seg.header.ack_num) break;
                //fprintf(stderr,"passed by\n");
                client_tcb_pools[i]->unAck_segNum--;
                p=p->next;
                free(client_tcb_pools[i]->sendBufHead);
                client_tcb_pools[i]->sendBufHead=p;
              }
              if (p==NULL||p->seg.header.seq_num==recv_seg.header.ack_num) {
                client_tcb_pools[i]->unAck_segNum = 0;
              }
              pthread_mutex_unlock(client_tcb_pools[i]->bufMutex);
            }
            break;
        }
        break;
      }
    }
  }
  return 0;
}

//return a-b in usec
int timediff (struct timeval a, struct timeval b) {
  int r;
  r=a.tv_sec-b.tv_sec;
  r*=1000000;
  r+=a.tv_usec-b.tv_usec;
  return r;
}

//这个线程持续轮询发送缓冲区以触发超时事件. 如果发送缓冲区非空, 它应一直运行.
//如果(当前时间 - 第一个已发送但未被确认段的发送时间) > DATA_TIMEOUT, 就发生一次超时事件.
//当超时事件发生时, 重新发送所有已发送但未被确认段. 当发送缓冲区为空时, 这个线程将终止.
#define DATASEG_TIMEOUT (DATA_TIMEOUT/1000)
void* sendBuf_timer(void* clienttcb) 
{
  client_tcb_t* p = (client_tcb_t*)clienttcb;
  segBuf_t* segbuf;
  struct timeval t;
  int c;
  for (;;) {
    //gettimeofday(&time_b,NULL);
    if (p->sendBufHead==NULL) pthread_exit(NULL);
    c = 0;
    pthread_mutex_lock(p->bufMutex);
    for (segbuf=p->sendBufHead;segbuf!=NULL;segbuf=segbuf->next) {
      gettimeofday(&segbuf->sentTime,NULL);
      c++;
      //fprintf(stderr,"sendBuf_timer: sending, seqNum: %d\n", segbuf->seg.header.seq_num);
      //if (sip_sendseg(connection,&segbuf->seg)==-1) {
      if (sip_sendseg(sip_conn,p->server_nodeID,&segbuf->seg)==-1) {
        fprintf(stderr,"sip_sendseg: send failed\n");
      }
      if (c==GBN_WINDOW) break;
    }
    p->sendBufunSent = segbuf;
    p->unAck_segNum = c;
    pthread_mutex_unlock(p->bufMutex);
    while(1) {
      usleep(DATASEG_TIMEOUT/1000);
      gettimeofday(&t,NULL);
      if (p->sendBufHead==p->sendBufunSent) break;
      if (timediff(t,p->sendBufHead->sentTime)>DATASEG_TIMEOUT) break;
      //gettimeofday(&time_e,NULL);
    //} while (((long)(time_e.tv_sec-time_b.tv_sec)*1000000+time_e.tv_usec-time_b.tv_usec)>DATASEG_TIMEOUT);
    }
    //  fprintf(stderr,"sendBuf_timer: resending\n");
  }
  return;
}

