//文件名: sip/sip.c
//
//描述: 这个文件实现SIP进程  
//
//创建日期: 2015年

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <strings.h>
#include <arpa/inet.h>
#include <signal.h>
#include <netdb.h>
#include <assert.h>
#include <sys/utsname.h>
#include <pthread.h>
#include <unistd.h>

#include "../common/constants.h"
#include "../common/pkt.h"
#include "../common/seg.h"
#include "../topology/topology.h"
#include "sip.h"
#include "nbrcosttable.h"
#include "dvtable.h"
#include "routingtable.h"

//SIP层等待这段时间让SIP路由协议建立路由路径. 
#define SIP_WAITTIME 60

/**************************************************************/
//声明全局变量
/**************************************************************/
int son_conn; 			//到重叠网络的连接
int stcp_conn;			//到STCP的连接
nbr_cost_entry_t* nct;			//邻居代价表
dv_t* dv;				//距离矢量表
pthread_mutex_t* dv_mutex;		//距离矢量表互斥量
routingtable_t* routingtable;		//路由表
pthread_mutex_t* routingtable_mutex;	//路由表互斥量

/**************************************************************/
//实现SIP的函数
/**************************************************************/

//SIP进程使用这个函数连接到本地SON进程的端口SON_PORT.
//成功时返回连接描述符, 否则返回-1.
int connectToSON() { 
	//你需要编写这里的代码.
	int sockfd;
	struct sockaddr_in serv_addr;
	if ((sockfd = socket(AF_INET,SOCK_STREAM,0))<0) {
		perror("socket error");
		return -1;
	}
	memset(&serv_addr,0,sizeof(serv_addr));
	serv_addr.sin_family=AF_INET;
	serv_addr.sin_port=htons(SON_PORT);
	if (inet_pton(AF_INET,"127.0.0.1",&serv_addr.sin_addr)<=0) {
		perror("inet_pton error for 127.0.0.1");
		return -1;
	}
	if (connect(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr))<0) {
		perror("connect error");
		return -1;
	}
	printf("****%d\n",son_conn);
	return sockfd;
}

//这个线程每隔ROUTEUPDATE_INTERVAL时间发送路由更新报文.路由更新报文包含这个节点
//的距离矢量.广播是通过设置SIP报文头中的dest_nodeID为BROADCAST_NODEID,并通过son_sendpkt()发送报文来完成的.
void build_routeupdate_pkt(sip_pkt_t* send_seg) {
	sip_hdr_t *header = &send_seg->header;
	header->dest_nodeID = BROADCAST_NODEID;
	header->type = ROUTE_UPDATE;
	memset(send_seg->data,0,MAX_PKT_LEN);
	pkt_routeupdate_t *pkt_ru = (pkt_routeupdate_t*)send_seg->data;
	int n=topology_getNbrNum(),N=topology_getNodeNum();
	pkt_ru->entryNum = N;
	header->length = sizeof(pkt_routeupdate_t)*N+sizeof(int);
	pthread_mutex_lock(dv_mutex);
	dv_t *dvt = dv+n;
	header->src_nodeID = dvt->nodeID;
	dv_entry_t *p=dvt->dvEntry;
	for (int i=0;i<N;i++) {
		pkt_ru->entry[i].nodeID = p->nodeID;
		pkt_ru->entry[i].cost = p->cost;
		p++;
	}
	pthread_mutex_unlock(dv_mutex);
}

void* routeupdate_daemon(void* arg) {
	//你需要编写这里的代码.
/*	memset(send_seg,0,sizeof(sip_pkt_t));	
	sip_hdr_t* header=(sip_hdr_t*)send_seg;
	header->src_nodeID=topology_getMyNodeID();
	header->dest_nodeID=BROADCAST_NODEID;
	header->type=ROUTE_UPDATE;
	header->length=0;*/
	while (1){
		sip_pkt_t* send_seg=malloc(sizeof(sip_pkt_t));
		build_routeupdate_pkt(send_seg);
		if (son_sendpkt(BROADCAST_NODEID,send_seg,son_conn)<0){
			puts("Route Send Error!");
		}
		puts("Route Send Success!");
		free(send_seg);
		sleep(ROUTEUPDATE_INTERVAL);
	}
	return 0;
}

//这个线程处理来自SON进程的进入报文. 它通过调用son_recvpkt()接收来自SON进程的报文.
//如果报文是SIP报文,并且目的节点就是本节点,就转发报文给STCP进程. 如果目的节点不是本节点,
//就根据路由表转发报文给下一跳.如果报文是路由更新报文,就更新距离矢量表和路由表.
void update_route(pkt_routeupdate_t *pkt_ru,int src_nodeID) {
	pthread_mutex_lock(dv_mutex);
	int n=topology_getNbrNum(),N=topology_getNodeNum(),m=topology_getMyNodeID();
	for (int i=0;i<pkt_ru->entryNum;i++) {
		int dest_nodeID = pkt_ru->entry[i].nodeID;
		unsigned int cost = pkt_ru->entry[i].cost;
		if (dvtable_getcost(dv,src_nodeID,dest_nodeID)>cost) {
			dvtable_setcost(dv,src_nodeID,dest_nodeID,cost);
			/*for (int j=0;j<N;j++) {
				int ncost = nbrcosttable_getcost(nct,src_nodeID);
				if (ncost+cost<dvtable_getcost(dv,m,dest_nodeID)) {
					dvtable_setcost(dv,m,dest_nodeID,ncost+cost);
					pthread_mutex_lock(routingtable_mutex);
					routingtable_*/
		}
	}
	int *a=topology_getNbrArray(),*A=topology_getNodeArray();
	pthread_mutex_lock(routingtable_mutex);
	for (int i=0;i<n;i++) {
		int fromID=a[i];
		for (int j=0;j<N;j++) {
			int toID=A[i];
			//int oldID=routingtable_getnextnode(routingtable,toID);
			int cost=nbrcosttable_getcost(nct,fromID)+dvtable_getcost(dv,fromID,toID);
			if (cost<dvtable_getcost(dv,m,toID)) {
				dvtable_setcost(dv,m,toID,cost);
				routingtable_setnextnode(routingtable,toID,fromID);
			}
		}
	}
	pthread_mutex_unlock(routingtable_mutex);
	pthread_mutex_unlock(dv_mutex);
}

void* pkthandler(void* arg) {
	//你需要编写这里的代码.
	while (1) {
		sip_pkt_t* pkt = malloc(sizeof(sip_pkt_t));
		son_recvpkt(pkt,son_conn);
		sip_hdr_t* hdr = &pkt->header;
		if (hdr->type==SIP) {
			if (hdr->dest_nodeID==topology_getMyNodeID()) {
				forwardsegToSTCP(stcp_conn,hdr->src_nodeID,&((sendseg_arg_t*)pkt->data)->seg);
			} else {
				pthread_mutex_lock(routingtable_mutex);
				son_sendpkt(routingtable_getnextnode(routingtable,hdr->dest_nodeID),pkt,son_conn);
				pthread_mutex_unlock(routingtable_mutex);
			}
		} else { //hdr->type==ROUTE_UPDATE
			update_route((pkt_routeupdate_t*)pkt->data,hdr->src_nodeID);
		}
	}
}

//这个函数终止SIP进程, 当SIP进程收到信号SIGINT时会调用这个函数. 
//它关闭所有连接, 释放所有动态分配的内存.
void sip_stop() {
	//你需要编写这里的代码.
	nbrcosttable_destroy(nct);
	dvtable_destroy(dv);
	routingtable_destroy(routingtable);
	free(dv_mutex);
	free(routingtable_mutex);
  return;
}

//这个函数打开端口SIP_PORT并等待来自本地STCP进程的TCP连接.
//在连接建立后, 这个函数从STCP进程处持续接收包含段及其目的节点ID的sendseg_arg_t. 
//接收的段被封装进数据报(一个段在一个数据报中), 然后使用son_sendpkt发送该报文到下一跳. 下一跳节点ID提取自路由表.
//当本地STCP进程断开连接时, 这个函数等待下一个STCP进程的连接.
void waitSTCP() {
	//你需要编写这里的代码.
	int listenfd = socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in saddr,caddr;
	memset(&saddr,0,sizeof(saddr);
	memset(&caddr,0,sizeof(caddr);
	saddr.sin_family = AF_INET;
	saddr.sin_addr.s_addr = htonl(INADDR_ANY);
	saddr.sin_port = htons(SIP_PORT);
	bind(listenfd,(struct sockaddr*)&saddr,sizeof(saddr));
	listen(listenfd,1);
	int clen=sizeof(caddr);
	while (1) {
		stcp_conn = accept(listenfd,(struct sockaddr*)&caddr,&clen);
		printf("%s: accept stcp connect\n",__FUNCTION__);
		int dest_nodeID;
		sip_pkt_t *sip_pkt=malloc(sizeof(sip_pkt_t));
		seg_t *segPtr=(seg_t*)&sip_pkt->data;
		while (1) {
			memset(sip_pkt,0,sizeof(sip_pkt_t));
			if (getsegToSend(stcp_conn,&dest_nodeID,segPtr)==11) break;
			int nextNodeID=routingtable_getnextnode(routingtable,dest_nodeID);
			son_sendpkt(nextNodeID,sip_pkt,son_conn);
		}
		close(stcp_conn);
		printf("%s: close stcp connect\n",__FUNCTION__);
		free(sip_pkt);
	}
  return;
}

int main(int argc, char *argv[]) {
	printf("SIP layer is starting, pls wait...\n");

	//初始化全局变量
	nct = nbrcosttable_create();
	dv = dvtable_create();
	dv_mutex = (pthread_mutex_t*)malloc(sizeof(pthread_mutex_t));
	pthread_mutex_init(dv_mutex,NULL);
	routingtable = routingtable_create();
	routingtable_mutex = (pthread_mutex_t*)malloc(sizeof(pthread_mutex_t));
	pthread_mutex_init(routingtable_mutex,NULL);
	son_conn = -1;
	stcp_conn = -1;

	nbrcosttable_print(nct);
	dvtable_print(dv);
	routingtable_print(routingtable);

	//注册用于终止进程的信号句柄
	signal(SIGINT, sip_stop);

	//连接到本地SON进程 
	son_conn = connectToSON();
	if(son_conn<0) {
		printf("can't connect to SON process\n");
		exit(1);		
	}
	
	//启动线程处理来自SON进程的进入报文 
	pthread_t pkt_handler_thread; 
	pthread_create(&pkt_handler_thread,NULL,pkthandler,(void*)0);

	//启动路由更新线程 
	pthread_t routeupdate_thread;
	pthread_create(&routeupdate_thread,NULL,routeupdate_daemon,(void*)0);	

	printf("SIP layer is started...\n");
	printf("waiting for routes to be established\n");
	sleep(SIP_WAITTIME);
	routingtable_print(routingtable);

	//等待来自STCP进程的连接
	printf("waiting for connection from STCP process\n");
	waitSTCP(); 

}


